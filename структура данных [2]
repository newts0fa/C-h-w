#include <iostream>
#include <set>
#include <iterator>
#include <numeric> // Для функции accumulate

// Функция для нахождения пересечения двух множеств
std::set<int> intersection(const std::set<int>& A, const std::set<int>& B) {
    std::set<int> result;
    for (int elem : A) {
        if (B.find(elem) != B.end()) {
            result.insert(elem);
        }
    }
    return result;
}

// Функция для вычисления среднего арифметического
double average(const std::set<int>& set) {
    if (set.empty()) return 0.0;
    int sum = std::accumulate(set.begin(), set.end(), 0);
    return static_cast<double>(sum) / set.size();
}

int main() {
    setlocale(LC_ALL, "RU");
    // Пример множеств A и B
    std::set<int> A = { 7, 9, 8, 1, 2 };
    std::set<int> B = { 2, 6 , -1 ,7 , 0 };

    // Находим пересечение множеств
    std::set<int> intersected = intersection(A, B);

    // Выводим пересечение
    std::cout << "Пересечение множеств A и B: ";
    for (int elem : intersected) {
        std::cout << elem << " ";
    }
    std::cout << "\n";

    // Вычисляем среднее арифметическое элементов пересечения
    double avg = average(intersected);
    std::cout << "Среднее арифметическое элементов пересечения: " << avg << "\n";

    return 0;
}
